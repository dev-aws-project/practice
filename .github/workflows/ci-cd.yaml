name: CI/CD Pipeline

# on:
#   pull_request:
#     types:
#       - opened

on:
  workflow_dispatch:
    inputs:
      run-manually:
        description: "Run job manually"

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  initialize:
    # if: github.event_name == 'pull_request'
    if: github.event.inputs.run-manually == 'true' || github.event.inputs.run-manually == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get cluster credentials
        id: get-cluster-credentials
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ secrets.CLUSTER_NAME }}
          cluster_endpoint=$(kubectl config view --minify -o jsonpath='{.clusters[0].cluster.server}')
          ca_certificate=$(kubectl config view --minify -o jsonpath='{.clusters[0].cluster."certificate-authority-data"}')
          echo "::set-output name=cluster_endpoint::$cluster_endpoint"
          echo "::set-output name=ca_certificate::$ca_certificate"

      - name: Create kubeconfig file
        run: |
          echo "apiVersion: v1" > kubeconfig.yaml
          echo "clusters:" >> kubeconfig.yaml
          echo "  - name: my-cluster" >> kubeconfig.yaml
          echo "    cluster:" >> kubeconfig.yaml
          echo "      server: ${{ steps.get-cluster-credentials.outputs.cluster_endpoint }}" >> kubeconfig.yaml
          echo "      certificate-authority-data: ${{ steps.get-cluster-credentials.outputs.ca_certificate }}" >> kubeconfig.yaml
          echo "contexts:" >> kubeconfig.yaml
          echo "  - name: my-context" >> kubeconfig.yaml
          echo "    context:" >> kubeconfig.yaml
          echo "      cluster: my-cluster" >> kubeconfig.yaml
          echo "      user: aws" >> kubeconfig.yaml
          echo "current-context: my-context" >> kubeconfig.yaml

      - name: Check available contexts
        run: kubectl config get-contexts

      - name: Set kubeconfig context
        run: kubectl config use-context arn:aws:eks:${{ secrets.AWS_REGION }}:498561179155:cluster/${{ secrets.CLUSTER_NAME }}

  build:
    # if: github.event_name == 'pull_request'
    if: github.event.inputs.run-manually == 'true' || github.event.inputs.run-manually == true
    needs: [initialize]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # - name: Login to ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker images
        run: |
          docker-compose -f docker-compose.yml build

      - name: Tag Docker images
        env:
          REGISTRY: 498561179155.dkr.ecr.us-east-1.amazonaws.com
          REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker tag practice_frontend $REGISTRY/$REPOSITORY:frontend_${{ github.sha }}
          docker tag practice_backend $REGISTRY/$REPOSITORY:backend_${{ github.sha }}
          docker tag practice_notif $REGISTRY/$REPOSITORY:notif_${{ github.sha }}

      - name: Authenticate your Docker client to your registry
        run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 498561179155.dkr.ecr.us-east-1.amazonaws.com

      - name: Push Docker image to ECR
        env:
          REGISTRY: 498561179155.dkr.ecr.us-east-1.amazonaws.com
          REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker push $REGISTRY/$REPOSITORY:frontend_${{ github.sha }}
          docker push $REGISTRY/$REPOSITORY:backend_${{ github.sha }}
          docker push $REGISTRY/$REPOSITORY:notif_${{ github.sha }}

  deploy:
    # if: github.event_name == 'pull_request' && github.event.action == 'closed'
    #if: github.event.inputs.run-manually == 'true' || github.event.inputs.run-manually == true
    needs: [build]
    runs-on: ubuntu-latest
    if: github.event_name == 'repository_dispatch'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # Шаги для установки и деплоя Helm-чарта (замените на свои собственные)

      - name: Deploy Helm Chart
        run: |
          helm install ladder ../helmchart --values values.yaml
