name: CI/CD Pipeline

on:
  pull_request:
    types:
      - opened

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  initialize:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get cluster credentials
        id: get-cluster-credentials
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ secrets.CLUSTER_NAME }}
          cluster_endpoint=$(kubectl config view --minify -o jsonpath='{.clusters[0].cluster.server}')
          ca_certificate=$(kubectl config view --minify -o jsonpath='{.clusters[0].cluster."certificate-authority-data"}')
          echo "::set-output name=cluster_endpoint::$cluster_endpoint"
          echo "::set-output name=ca_certificate::$ca_certificate"

      - name: Create kubeconfig file
        run: |
          echo "apiVersion: v1" > kubeconfig.yaml
          echo "clusters:" >> kubeconfig.yaml
          echo "  - name: my-cluster" >> kubeconfig.yaml
          echo "    cluster:" >> kubeconfig.yaml
          echo "      server: ${{ steps.get-cluster-credentials.outputs.cluster_endpoint }}" >> kubeconfig.yaml
          echo "      certificate-authority-data: ${{ steps.get-cluster-credentials.outputs.ca_certificate }}" >> kubeconfig.yaml
          echo "contexts:" >> kubeconfig.yaml
          echo "  - name: my-context" >> kubeconfig.yaml
          echo "    context:" >> kubeconfig.yaml
          echo "      cluster: my-cluster" >> kubeconfig.yaml
          echo "      user: aws" >> kubeconfig.yaml
          echo "current-context: my-context" >> kubeconfig.yaml

      - name: Check available contexts
        run: kubectl config get-contexts

      - name: Set kubeconfig context
        run: kubectl config use-context arn:aws:eks:${{ secrets.AWS_REGION }}:498561179155:cluster/${{ secrets.CLUSTER_NAME }}

  build:
    if: github.event_name == 'pull_request'
    needs: [initialize]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker
        uses: docker/setup-buildx-action@v1

      - name: Build and tag Docker image
        run: |
          docker-compose -f docker-compose.yml build 
          docker tag practice_frontend ${{ secrets.AWS_ACCESS_KEY_ID }}.${{ secrets.ECR_REGISTRY }}/frontend:${{ github.sha }}
          docker tag practice_backend ${{ secrets.AWS_ACCESS_KEY_ID }}.${{ secrets.ECR_REGISTRY }}/backend:${{ github.sha }}
          docker tag practice_notif ${{ secrets.AWS_ACCESS_KEY_ID }}.${{ secrets.ECR_REGISTRY }}/notif:${{ github.sha }}

  push:
    if: github.event_name == 'pull_request'
    needs: [build]
    runs-on: ubuntu-latest

    steps:
      - name: Login to ECR
        uses: roimor/aws-cli-action@v1
        with:
          args: export DOCKER_TLS_VERIFY="0"
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

      # - name: Login to ECR
      #   run: |
      #     export DOCKER_TLS_VERIFY="0"
      #     aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCESS_KEY_ID }}.${{ secrets.ECR_REGISTRY }}/frontend:${{ github.sha }}
          docker push ${{ secrets.AWS_ACCESS_KEY_ID }}.${{ secrets.ECR_REGISTRY }}/backend:${{ github.sha }}
          docker push ${{ secrets.AWS_ACCESS_KEY_ID }}.${{ secrets.ECR_REGISTRY }}/notif:${{ github.sha }}

  deploy:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    needs: [push]
    runs-on: ubuntu-latest

    steps:
      - name: Manual deployment trigger
        id: manual-deploy
        uses: peter-evans/manual-deploy@v1.2.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.head_ref }}
          deployment_file: deployment.yaml
          kubeconfig_file: kubeconfig.yaml
